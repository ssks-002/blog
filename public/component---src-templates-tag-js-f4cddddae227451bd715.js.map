{"version":3,"file":"component---src-templates-tag-js-f4cddddae227451bd715.js","mappings":"6LA8EA,UAhEY,SAAC,GAAwB,IAAtBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACXC,EAAMF,EAAKG,SACXC,EAAQJ,EAAKK,aAAaC,MAEhC,OACI,gCACI,gBAAC,IAAD,CAAUN,KAAMA,EAAMC,SAAUA,EAAUM,KAAK,WAC/C,gBAAC,KAAD,KACI,wBAAMC,UAAU,aACZ,0BAAQA,UAAU,oBACdC,MAAO,CACHC,gBAAgB,GAAIR,EAAIS,eAG1BT,EAAIU,eAAiB,uBAAKC,IAAKX,EAAIU,iBAEzC,gBAAC,IAAD,CAAYE,MAAM,sBAClB,uBAAKN,UAAU,aACf,0BAAQA,UAAU,kBAClB,sBAAIA,UAAU,YACTN,EAAIa,KACL,uBAAKP,UAAU,aAAf,MACUN,EAAIc,UADd,MAIHd,EAAIe,YAAc,qBAAGT,UAAU,mBAAmBN,EAAIe,aAAmB,OAG1E,gBAAC,KAAD,CAAgBb,MAAOA,EAAOH,SAAS,SAEvC,gBAAC,IAAD,CAAYa,MAAM,sBAClB,uBAAKN,UAAU,aACX,0BAAQA,UAAU,kBAClB,sBAAIA,UAAU,YACTN,EAAIa,KACL,uBAAKP,UAAU,aAAf,MACUN,EAAIc,UADd,MAIHd,EAAIe,YAAc,qBAAGT,UAAU,mBAAmBN,EAAIe,aAAmB,MAE1E,gBAAC,KAAD,CAAgBb,MAAOA,EAAOH,SAAS,YAO9D,C","sources":["webpack://gatsby-starter-ghost/./src/templates/tag.js"],"sourcesContent":["import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport MediaQuery from \"react-responsive\";\nimport { graphql } from \"gatsby\";\nimport { Layout, InfiniteScroll } from \"../components/common\";\nimport { MetaData } from \"../components/common/meta\";\n\n/**\n * Tag page (/tag/:slug)\n *\n * Loads all posts for the requested tag incl. pagination.\n *\n */\n\nconst Tag = ({ data, location }) => {\n    const tag = data.ghostTag;\n    const posts = data.allGhostPost.edges;\n\n    return (\n        <>\n            <MetaData data={data} location={location} type=\"series\" />\n            <Layout>\n                <main className=\"site-main\">\n                    <figure className=\"tag-feature-image\"\n                        style={{\n                            backgroundColor: `${tag.accent_color}`,\n                        }}\n                    >\n                        { tag.feature_image && <img src={tag.feature_image}/> }\n                    </figure>    \n                    <MediaQuery query=\"(min-width: 800px)\">\n                    <div className=\"container\">\n                    <figure className=\"tag-header-box\">\n                    <h1 className=\"tag-name\">\n                        {tag.name}\n                        <div className=\"tag-count\">\n                        &ndash;  {tag.postCount}件\n                        </div>\n                    </h1>\n                    {tag.description ? <p className=\"tag-description\">{tag.description}</p> : null}\n                    </figure>\n                    </div>\n                    <InfiniteScroll posts={posts} location=\"tag\"/>\n                    </MediaQuery>\n                    <MediaQuery query=\"(max-width: 800px)\">\n                    <div className=\"container\">\n                        <figure className=\"tag-header-box\">\n                        <h1 className=\"tag-name\">\n                            {tag.name}\n                            <div className=\"tag-count\">\n                            &ndash;  {tag.postCount}件\n                            </div>\n                        </h1>\n                        {tag.description ? <p className=\"tag-description\">{tag.description}</p> : null}\n                        </figure>\n                        <InfiniteScroll posts={posts} location=\"tag\"/>\n                    </div>\n                    </MediaQuery>\n                </main>\n            </Layout>\n        </>\n    );\n};\n\nTag.propTypes = {\n    data: PropTypes.shape({\n        ghostTag: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            description: PropTypes.string,\n        }),\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    pageContext: PropTypes.object,\n};\n\nexport default Tag;\n\nexport const pageQuery = graphql`\n    query GhostTagQuery($slug: String!) {\n        ghostTag(slug: { eq: $slug }) {\n            ...GhostTagFields\n            accent_color\n            postCount\n        }\n        allGhostPost(\n            sort: { order: DESC, fields: [published_at] }\n            filter: { tags: { elemMatch: { slug: { eq: $slug } } } }\n        ) {\n            edges {\n                node {\n                    ...GhostPostFields\n                }\n            }\n        }\n    }\n`;\n"],"names":["data","location","tag","ghostTag","posts","allGhostPost","edges","type","className","style","backgroundColor","accent_color","feature_image","src","query","name","postCount","description"],"sourceRoot":""}