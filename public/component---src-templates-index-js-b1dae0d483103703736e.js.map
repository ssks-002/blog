{"version":3,"file":"component---src-templates-index-js-b1dae0d483103703736e.js","mappings":"6LAgFA,UArEc,SAAC,GAAqC,IAAnCA,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC3BC,EAAQH,EAAKI,aAAaC,MAC1BC,EAAON,EAAKO,YAAYF,MACvBG,EAAiCN,EAAjCM,MAAOC,EAA0BP,EAA1BO,WAAYC,EAAcR,EAAdQ,WAE1B,OACI,gCACI,gBAAC,IAAD,CAAUT,SAAUA,IACpB,gBAAC,KAAD,CAAQU,QAAQ,EAAMV,SAAS,QAAQO,MAAOA,EAAOC,WAAYA,EAAYC,WAAYA,GACrF,gBAAC,IAAD,CAAYE,MAAM,sBACd,wBAAMC,UAAU,aACZ,uBAAKA,UAAU,aACX,uBAAKA,UAAU,oBACX,sBAAIA,UAAU,gBAAd,aAEJ,uBAAKA,UAAU,UACX,gBAAC,KAAD,CAAgBV,MAAOA,EAAOQ,QAAQ,IACtC,uBAAKE,UAAU,oBACX,sBAAIA,UAAU,gBAAd,SAEJ,2BAASA,UAAU,YAClBP,GAAQA,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACd,gBAAC,KAAD,CAAgBC,IAAKD,EAAKE,GAAIC,IAAKH,GADrB,KAIlB,uBAAKF,UAAU,WACX,uBAAKA,UAAU,oBAAoBI,GAAG,KAClC,uBAAKJ,UAAU,eACf,gBAAC,KAAD,CAAYL,MAAOA,EAAOC,WAAYA,EAAYC,WAAYA,WAQtF,gBAAC,IAAD,CAAYE,MAAM,sBAClB,wBAAMC,UAAU,aACR,uBAAKA,UAAU,aACX,uBAAKA,UAAU,oBACX,sBAAIA,UAAU,gBAAd,aAEA,gBAAC,KAAD,CAAgBV,MAAOA,EAAOQ,QAAQ,IAC1C,uBAAKE,UAAU,oBACX,sBAAIA,UAAU,gBAAd,SAEJ,2BAASA,UAAU,YAClBP,GAAQA,EAAKQ,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACd,gBAAC,KAAD,CAAgBC,IAAKD,EAAKE,GAAIC,IAAKH,GADrB,SAUzC,C","sources":["webpack://gatsby-starter-ghost/./src/templates/index.js"],"sourcesContent":["import * as React  from \"react\";\nimport PropTypes from \"prop-types\";\nimport MediaQuery from \"react-responsive\";\nimport { graphql } from \"gatsby\";\nimport { Layout, ArchiveNav, InfiniteScroll, PrimaryTagCard } from \"../components/common\";\nimport { MetaData } from \"../components/common/meta\";\n\n/**\n * Main index page\n */\n\nconst Index = ({ data, location, pageContext }) => {\nconst posts = data.allGhostPost.edges;\nconst tags = data.allGhostTag.edges;\nconst {years, yearMonths, PostCounts} = pageContext\n\nreturn (\n    <>\n        <MetaData location={location} />\n        <Layout isHome={true} location=\"index\" years={years} yearMonths={yearMonths} PostCounts={PostCounts} >\n            <MediaQuery query=\"(min-width: 800px)\">\n                <main className=\"site-main\">\n                    <div className=\"container\">\n                        <div className=\"index-header-box\">\n                            <h2 className=\"index-header\">Archives</h2>\n                        </div>\n                        <div className=\"Layout\">\n                            <InfiniteScroll posts={posts} isHome={true}></InfiniteScroll>\n                            <div className=\"index-header-box\">\n                                <h2 className=\"index-header\">Tags</h2>\n                            </div>\n                            <section className=\"tag-list\">\n                            {tags && tags.map(({ node }) => (\n                                <PrimaryTagCard key={node.id} tag={node} />\n                            ))}\n                            </section>\n                            <div className=\"sidebar\">\n                                <div className=\"sidebar-container\" id=\"1\">\n                                    <div className=\"sidebar-box\">\n                                    <ArchiveNav years={years} yearMonths={yearMonths} PostCounts={PostCounts}/>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </main>\n            </MediaQuery>\n            <MediaQuery query=\"(max-width: 800px)\">\n            <main className=\"site-main\">\n                    <div className=\"container\">\n                        <div className=\"index-header-box\">\n                            <h2 className=\"index-header\">Archives</h2>\n                        </div>\n                            <InfiniteScroll posts={posts} isHome={true}></InfiniteScroll>\n                        <div className=\"index-header-box\">\n                            <h2 className=\"index-header\">Tags</h2>\n                        </div>\n                        <section className=\"tag-list\">\n                        {tags && tags.map(({ node }) => (\n                            <PrimaryTagCard key={node.id} tag={node} />\n                        ))}\n                        </section>\n                    </div>\n                </main>\n            </MediaQuery>\n        </Layout>\n    </>\n);\n};\n\nIndex.propTypes = {\n    data: PropTypes.shape({\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    pageContext: PropTypes.object,\n};\n\nexport default Index;\n\n\nexport const pageQuery = graphql`\n    query GhostPostQuery{\n        allGhostPost(\n            sort: { order: DESC, fields: [published_at] }\n        ) {\n            edges {\n                node {\n                    ...GhostPostFields\n                }\n            }\n        }\n        allGhostTag(\n            sort: { order: DESC, fields: [count___posts] }\n            filter: { visibility: { eq: \"public\" } }\n        ) {\n            edges {\n                node {\n                    name\n                    accent_color\n                    slug\n                }\n            }\n        }\n    }\n`;\n"],"names":["data","location","pageContext","posts","allGhostPost","edges","tags","allGhostTag","years","yearMonths","PostCounts","isHome","query","className","map","node","key","id","tag"],"sourceRoot":""}